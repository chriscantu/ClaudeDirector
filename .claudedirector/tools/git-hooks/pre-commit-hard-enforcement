#!/usr/bin/env python3
"""
üö® HARD ENFORCEMENT PRE-COMMIT HOOK
ZERO TOLERANCE - ZERO BYPASS - ZERO EXCEPTIONS

BLOCKS ALL COMMITS until FULL compliance achieved with:
- Spec-kit format for all specifications
- Sequential Thinking methodology for all development
- Context7 enhancement for strategic work
- DRY and SOLID principles for all code
- PROJECT_STRUCTURE.md compliance for file placement
- BLOAT_PREVENTION_SYSTEM.md integration

Author: Martin | Platform Architecture
"""

import sys
import os
import subprocess
from pathlib import Path

# Add enforcement tools to path
sys.path.insert(0, str(Path(__file__).parent.parent / "enforcement"))

from cursor_claude_enforcer import CursorClaudeHardEnforcer


def get_staged_files():
    """Get list of staged files for commit"""
    try:
        result = subprocess.run(
            ['git', 'diff', '--cached', '--name-only'],
            capture_output=True,
            text=True,
            check=True
        )
        return [f.strip() for f in result.stdout.split('\n') if f.strip()]
    except subprocess.CalledProcessError:
        return []


def get_commit_message():
    """Get commit message for analysis"""
    try:
        # Try to get commit message from git
        result = subprocess.run(
            ['git', 'log', '-1', '--pretty=%B'],
            capture_output=True,
            text=True
        )
        return result.stdout.strip()
    except:
        return ""


def main():
    """
    üö® HARD ENFORCEMENT PRE-COMMIT HOOK

    BLOCKS commits that violate compliance requirements.
    NO BYPASS - NO EXCEPTIONS - NO WORKAROUNDS
    """

    print("üö® CURSOR/CLAUDE HARD ENFORCEMENT - Pre-Commit Validation")
    print("=" * 60)

    # Initialize enforcer
    enforcer = CursorClaudeHardEnforcer()

    # Get staged files and commit context
    staged_files = get_staged_files()
    commit_message = get_commit_message()

    # Build enforcement context
    context = {
        'files': staged_files,
        'description': commit_message,
        'operation_type': 'commit',
        'staged_files': staged_files
    }

    # Run hard enforcement validation
    result = enforcer.enforce_hard_compliance('git-commit', context)

    if not result.passed:
        print("\nüö´ COMMIT BLOCKED - COMPLIANCE VIOLATIONS DETECTED")
        print("=" * 60)

        enforcer.block_operation_with_message(result, 'git-commit')

        print("\nüõ†Ô∏è REMEDIATION REQUIRED:")
        print("Fix all violations above before attempting to commit.")
        print("Re-run 'git commit' after resolving compliance issues.")
        print("\nüö® NO BYPASS OPTIONS AVAILABLE")
        print("=" * 60)

        return 1

    else:
        print(f"‚úÖ COMPLIANCE VALIDATED - Commit Approved")
        print(f"   Files validated: {len(staged_files)}")
        print(f"   Validation time: {result.execution_time_ms:.1f}ms")
        print("=" * 60)

        return 0


if __name__ == '__main__':
    sys.exit(main())
