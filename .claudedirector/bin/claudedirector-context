#!/usr/bin/env python3
"""
ClaudeDirector Context CLI Tool
Martin's command-line interface for cross-environment context management
"""

import sys
import os
from pathlib import Path

# Add the lib directory to the Python path
lib_path = Path(__file__).parent.parent / "lib"
sys.path.insert(0, str(lib_path))

from claudedirector.bridges.cli_context_bridge import CLIContextBridge
from claudedirector.core.integrated_conversation_manager import IntegratedConversationManager


def print_help():
    """Print CLI usage help"""
    print("""
ClaudeDirector Context Management CLI
====================================

USAGE:
    claudedirector-context <command> [options]

COMMANDS:
    export-cli              Create CLI-optimized context export
    export-full [format]    Create full context export (markdown, json, yaml)
    import <file>           Import context from file
    session-status          Show current session status
    session-backup          Manual context backup
    session-export <file>   Export session for CLI use
    recover                 Attempt context recovery
    help                    Show this help

EXAMPLES:
    # Export for Claude CLI use
    claudedirector-context export-cli > ~/claude-context.md

    # Create full export
    claudedirector-context export-full markdown ~/strategic-context.md

    # Check session status
    claudedirector-context session-status

    # Manual backup
    claudedirector-context session-backup

    # Recovery from context loss
    claudedirector-context recover

CONTEXT SHARING:
    Use the export-cli command to create context files for sharing
    with Claude CLI or other AI interfaces:

    claude chat --context ~/claude-context.md "Continue strategic work..."
""")


def main():
    """Main CLI interface"""
    if len(sys.argv) < 2:
        print_help()
        return 1

    command = sys.argv[1]

    try:
        if command == "help" or command == "--help" or command == "-h":
            print_help()
            return 0

        elif command == "export-cli":
            bridge = CLIContextBridge()
            cli_export = bridge.create_cli_session_export()
            print(cli_export)
            return 0

        elif command == "export-full":
            bridge = CLIContextBridge()
            format_type = sys.argv[2] if len(sys.argv) > 2 else "markdown"
            output_file = sys.argv[3] if len(sys.argv) > 3 else None

            if format_type not in ["markdown", "json", "yaml"]:
                print(f"‚ùå Invalid format: {format_type}. Use: markdown, json, yaml")
                return 1

            full_export = bridge.export_current_context(format_type, output_file)

            if output_file:
                print(f"‚úÖ Context exported to {output_file}")
            else:
                print(full_export)
            return 0

        elif command == "import" and len(sys.argv) > 2:
            bridge = CLIContextBridge()
            file_path = sys.argv[2]

            if not os.path.exists(file_path):
                print(f"‚ùå File not found: {file_path}")
                return 1

            success = bridge.import_context_from_file(file_path)
            if success:
                print("‚úÖ Context imported successfully")
                return 0
            else:
                print("‚ùå Context import failed")
                return 1

        elif command == "session-status":
            manager = IntegratedConversationManager()
            status = manager.get_session_status()

            print("üìã Session Status")
            print("=" * 20)
            print(f"Status: {status['status']}")

            if status['status'] == 'active':
                print(f"Session ID: {status['session_id'][:12]}...")
                print(f"Conversation turns: {status['conversation_turns']}")
                print(f"Time since backup: {status['time_since_backup']}s")
                print(f"Context quality: {status['context_quality']:.1%}")
                print(f"Active personas: {', '.join(status['active_personas'])}")
                print(f"Next backup in: {status['next_backup_in']}s")
            else:
                print("No active session")

            return 0

        elif command == "session-backup":
            manager = IntegratedConversationManager()
            success = manager.backup_conversation_context()

            if success:
                print("‚úÖ Session backup completed")
                return 0
            else:
                print("‚ùå Session backup failed or no active session")
                return 1

        elif command == "session-export":
            if len(sys.argv) < 3:
                print("‚ùå Output file required for session-export")
                return 1

            manager = IntegratedConversationManager()
            output_file = sys.argv[2]

            try:
                cli_export = manager.export_for_cli(output_file)
                print(f"‚úÖ Session exported to {output_file}")
                return 0
            except Exception as e:
                print(f"‚ùå Session export failed: {e}")
                return 1

        elif command == "recover":
            manager = IntegratedConversationManager()
            success = manager.recover_from_context_loss()

            if success:
                print("‚úÖ Context recovery completed")
                return 0
            else:
                print("‚ùå Context recovery failed")
                return 1

        else:
            print(f"‚ùå Unknown command: {command}")
            print("Use 'claudedirector-context help' for usage information")
            return 1

    except Exception as e:
        print(f"‚ùå Error: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
