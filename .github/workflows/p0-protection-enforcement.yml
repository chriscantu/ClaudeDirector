name: P0 Protection Enforcement
on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  p0-protection:
    name: "🛡️ P0 Business-Critical Test Protection"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

        # Install additional CI dependencies
        pip install psutil pyyaml

        # Verify environment matches local
        echo "🔍 Python version: $(python --version)"
        echo "🔍 Pip version: $(pip --version)"
        echo "🔍 Working directory: $(pwd)"

    - name: Initialize Environment (exact local match)
      run: |
        echo "🔧 Setting up environment to match local exactly"

        # Set Python path exactly as local environment (absolute paths + preserve existing)
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/.claudedirector/lib:$(pwd)/.claudedirector/tests/regression:$(pwd)/.claudedirector/tests/integration"
        echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV

        # Debug: Show actual PYTHONPATH for troubleshooting
        echo "🔍 PYTHONPATH set to: $PYTHONPATH"

        # Verify critical directories exist
        echo "🔍 Verifying critical paths:"
        ls -la .claudedirector/lib/ | head -5

        # Set CI flag for environment detection
        export GITHUB_ACTIONS=true
        echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV

        # Initialize database exactly as local
        python .claudedirector/tools/ci/init-database.py

        # Verify database creation
        echo "🔍 Database verification:"
        ls -la data/ || echo "No data directory yet"

    - name: Run P0 Protection Gate
      env:
        PYTHONPATH: ${{ github.workspace }}/.claudedirector/lib:${{ github.workspace }}/.claudedirector/tests/regression:${{ github.workspace }}/.claudedirector/tests/integration
      run: |
        echo "🛡️ MANDATORY P0 PROTECTION GATE"
        echo "================================="
        echo "P0 tests are BUSINESS-CRITICAL and must pass 100%"
        echo "No exceptions. No deferrals. No compromises."
        echo ""

        python .claudedirector/tools/p0_protection/mandatory_p0_gates.py "CI/CD Pipeline"

    - name: P0 Test Execution
      env:
        PYTHONPATH: ${{ github.workspace }}/.claudedirector/lib:${{ github.workspace }}/.claudedirector/tests/regression:${{ github.workspace }}/.claudedirector/tests/integration
      run: |
        echo "🧪 Running mandatory P0 test suite..."
        python .claudedirector/tests/p0_enforcement/run_mandatory_p0_tests.py

    - name: P0 Results Validation
      env:
        PYTHONPATH: ${{ github.workspace }}/.claudedirector/lib:${{ github.workspace }}/.claudedirector/tests/regression:${{ github.workspace }}/.claudedirector/tests/integration
      run: |
        echo "📊 Validating P0 results..."
        echo "🔍 PYTHONPATH: $PYTHONPATH"

        # Run P0 tests and capture all output for debugging
        echo "🧪 Running P0 tests for validation..."
        full_output=$(python .claudedirector/tests/p0_enforcement/run_mandatory_p0_tests.py 2>&1)
        exit_code=$?

        echo "🔍 P0 test exit code: $exit_code"
        echo "🔍 P0 test output (last 10 lines):"
        echo "$full_output" | tail -10

        # Check if tests ran successfully first
        if [ $exit_code -ne 0 ]; then
          echo "🚨 P0 TESTS FAILED TO RUN"
          echo "❌ BLOCKING DEPLOYMENT: P0 tests failed with exit code $exit_code"
          echo "🔍 Full test output:"
          echo "$full_output"
          exit 1
        fi

        # Extract results dynamically
        result=$(echo "$full_output" | grep "SUCCESS RATE" || true)
        echo "🔍 SUCCESS RATE line: '$result'"

        # Extract the actual test counts dynamically (e.g., "40/40 tests passing")
        if echo "$result" | grep -q "tests passing (100%)"; then
          test_count=$(echo "$result" | grep -o '[0-9]\+/[0-9]\+ tests passing' | head -1)
          echo "✅ P0 PROTECTION: All $test_count business-critical tests passing"
        else
          echo "🚨 P0 PROTECTION FAILURE: Not all P0 tests passing"
          echo "❌ BLOCKING DEPLOYMENT: P0 tests are business-critical"
          echo "🔍 Expected SUCCESS RATE line with 'tests passing (100%)', got: '$result'"
          echo "🔍 Full test output:"
          echo "$full_output"
          exit 1
        fi

    - name: Success Notification
      if: success()
      run: |
        echo "🎉 P0 PROTECTION PASSED"
        # Get dynamic test count for success message
        test_count=$(python .claudedirector/tests/p0_enforcement/run_mandatory_p0_tests.py 2>&1 | grep -o '[0-9]\+/[0-9]\+ tests passing' | head -1)
        echo "✅ All $test_count business-critical tests verified"
        echo "🟢 Deployment approved by P0 protection system"
