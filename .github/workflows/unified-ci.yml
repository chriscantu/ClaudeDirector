name: ClaudeDirector Unified CI/CD Pipeline

# Single source of truth for all CI validation
# Eliminates CI/local discrepancies through unified execution

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Single unified job that matches local environment exactly
  unified-validation:
    runs-on: ubuntu-latest
    name: Unified Validation (Local Environment Parity)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Verify Python environment for pre-commit
        run: |
          echo "üîß Verifying Python environment"
          echo "üîç Python executable: $(which python)"
          echo "üîç Python3 executable: $(which python3)"
          echo "üîç Python version: $(python --version)"
          echo "üîç Python3 version: $(python3 --version)"
          echo "üîç Pip3 executable: $(which pip3)"

          # CRITICAL: Ensure python3 points to our setup Python for pre-commit hooks
          # Pre-commit hooks use 'language: system' which means system python3
          python3 -c "import sys; print(f'Python3 sys.executable: {sys.executable}')"
          python -c "import sys; print(f'Python sys.executable: {sys.executable}')"

      - name: Install dependencies (exact local match)
        run: |
          # Install using both python and python3 to ensure compatibility
          python -m pip install --upgrade pip
          python3 -m pip install --upgrade pip

          pip install -r requirements.txt
          python3 -m pip install -r requirements.txt

          # Install additional CI dependencies for BOTH python and python3
          pip install psutil pyyaml pre-commit
          python3 -m pip install psutil pyyaml pre-commit

          # Verify BOTH Python installations have required packages
          echo "üîç Verifying Python package installation:"
          python -c "import pytest; print(f'Python pytest: {pytest.__version__}')"
          python3 -c "import pytest; print(f'Python3 pytest: {pytest.__version__}')"

          # Verify environment matches local
          echo "üîç Python version: $(python --version)"
          echo "üîç Python3 version: $(python3 --version)"
          echo "üîç Pip version: $(pip --version)"
          echo "üîç Working directory: $(pwd)"
          echo "üîç Repository structure:"
          ls -la

      - name: Initialize Environment (exact local match)
        run: |
          echo "üîß Setting up environment to match local exactly"

          # Set Python path exactly as local environment (absolute paths + preserve existing)
          PYTHONPATH_VALUE="$(pwd)/.claudedirector/lib:$(pwd)/.claudedirector/tests/regression:$(pwd)/.claudedirector/tests/integration"
          export PYTHONPATH="$PYTHONPATH_VALUE"
          echo "PYTHONPATH=$PYTHONPATH_VALUE" >> $GITHUB_ENV

          # Debug: Show actual PYTHONPATH for troubleshooting
          echo "üîç PYTHONPATH set to: $PYTHONPATH"

          # Verify PYTHONPATH is accessible from python3 (used by pre-commit hooks)
          echo "üîç Testing PYTHONPATH with python3:"
          python3 -c "import sys; print(f'sys.path entries: {[p for p in sys.path if \"claudedirector\" in p]}')"

          # Verify critical directories exist
          echo "üîç Verifying critical paths:"
          ls -la .claudedirector/lib/ | head -5
          ls -la .claudedirector/lib/ai_intelligence/ | head -5

          # Test import resolution
          echo "üîç Testing import resolution:"
          python -c "import sys; print('Python path entries:'); [print(f'  {p}') for p in sys.path if 'claudedirector' in p]"
          python -c "import sys; sys.path.insert(0, '$(pwd)/.claudedirector/lib'); from ai_intelligence.decision_orchestrator import DecisionIntelligenceOrchestrator; print('‚úÖ AI Intelligence import successful')" || echo "‚ùå AI Intelligence import failed"

          # Run comprehensive import diagnostic
          echo "üîç Running comprehensive CI import diagnostic:"
          python .claudedirector/tests/debug_ci_import.py || echo "‚ùå Diagnostic failed"

          # Set CI flag for environment detection
          export GITHUB_ACTIONS=true
          echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV

          # Initialize database exactly as local
          python .claudedirector/tools/ci/init-database.py

          # Verify database creation
          echo "üîç Database verification:"
          ls -la data/
          if [ -f "data/strategic_memory.db" ]; then
            sqlite3 data/strategic_memory.db ".tables"
          fi

      - name: Run Unified P0 Test Suite (exact local execution)
        env:
          PYTHONPATH: ${{ github.workspace }}/.claudedirector/lib:${{ github.workspace }}/.claudedirector/tests/regression:${{ github.workspace }}/.claudedirector/tests/integration
        run: |
          echo "üöÄ UNIFIED P0 TEST EXECUTION"
          echo "============================================================"
          echo "Using IDENTICAL execution path as local environment"
          echo "Command: python3 .claudedirector/tests/p0_enforcement/run_mandatory_p0_tests.py"
          echo "PYTHONPATH: $PYTHONPATH"
          echo "============================================================"

          # Verify environment one more time before test execution
          echo "üîç Final environment verification:"
          python3 -c "import sys; print(f'Working dir: {sys.path[0]}'); print(f'PYTHONPATH entries: {[p for p in sys.path if \"claudedirector\" in p]}')"

          # Run P0 tests using python3 (same as pre-commit hooks)
          python3 .claudedirector/tests/p0_enforcement/run_mandatory_p0_tests.py || {
            echo "‚ùå P0 TESTS FAILED - Environment discrepancy detected"
            echo "üìã Check test results for detailed failure information"
            echo "üîç Debug info:"
            echo "  PYTHONPATH: $PYTHONPATH"
            python3 -c "import sys; [print(f'  {p}') for p in sys.path]"
            exit 1
          }

          echo "‚úÖ P0 tests completed - identical to local execution"

      - name: Run Pre-commit Validation (exact local match)
        env:
          CLAUDEDIRECTOR_ALLOW_README_CHANGES: true
          PYTHONPATH: ${{ github.workspace }}/.claudedirector/lib:${{ github.workspace }}/.claudedirector/tests/regression:${{ github.workspace }}/.claudedirector/tests/integration
        run: |
          echo "üîß PRE-COMMIT VALIDATION (matching local hooks)"
          echo "üîç PYTHONPATH for pre-commit: $PYTHONPATH"
          echo "üîç Python executable: $(which python)"
          echo "üîç Pre-commit executable: $(which pre-commit)"

          # Verify pre-commit is using the correct Python
          pre-commit --version

          # Run pre-commit hooks with proper failure handling
          # CRITICAL: PYTHONPATH must be set in env above for pre-commit subprocesses
          pre-commit run --all-files || {
            echo "‚ùå PRE-COMMIT HOOKS FAILED"
            echo "üö® This indicates real quality issues that must be fixed"
            echo "üîß Fix these issues locally and re-push"
            echo ""
            echo "üîç DEBUG INFO:"
            echo "  PYTHONPATH: $PYTHONPATH"
            echo "  Python version: $(python --version)"
            echo "  Pre-commit version: $(pre-commit --version)"
            exit 1
          }

          echo "‚úÖ Pre-commit validation completed"

      - name: Validation Summary
        run: |
          echo "============================================================"
          echo "‚úÖ UNIFIED CI VALIDATION COMPLETE"
          echo "============================================================"
          echo "üéØ Environment Parity: 100% match with local"
          echo "üß™ Test Execution: Identical to local commands"
          echo "üîß Pre-commit: Same hooks as local environment"
          echo "üìä Result: CI failures now match local failures exactly"
          echo "============================================================"
